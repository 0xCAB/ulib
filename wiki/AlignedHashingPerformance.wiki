We compare the performance of some popular hashings. Our primary interest focuses on insertion and search. In order to obtain accurate results, both key and value types are size_t, hence ignoring memory copy of large keys/values. 

The tests are performed on a 64-bit Linux laptop, with Intel i3 CPU and 4G memory. All test programs are compiled with GCC 4.5.2 with -O2 optimizations.

== Random Keys ==

|| *Hashing* || *Map Capacity* || *Insertion Time(us)* || *Search Time(us)* || *Memory Usage(Byte)* ||
|| *STL Hash Map* || 50000 || 330 || 66 || *825664* ||
|| *Google Sparse Hash Map* || 50000 || 374 || 127 || 4246053 ||
|| *Google Dense Hash Map* || 50000 || 102 || 43 || 2395648 ||
|| *ULIB Align Hash Map* || 50000 || *96* || *25* || 2098176 ||

|| *Hashing* || *Map Capacity* || *Insertion Time(us)* || *Search Time(us)* || *Memory Usage(Byte)* ||
|| *STL Hash Map* || 100000 || 384 || 92 || *1650240* ||
|| *Google Sparse Hash Map* || 100000 || 409 || 147 || 4246053 ||
|| *Google Dense Hash Map* || 100000 || 131 || 69 || 4782080 ||
|| *ULIB Align Hash Map* || 100000 || *98* || *32* || 4195328 ||

== Sequential Keys ==

|| *Hashing* || *Map Capacity* || *Insertion Time(us)* || *Search Time(us)* || *Memory Usage(Byte)* ||
|| *STL Hash Map* || 50000 || 125 || *16* || *825728* ||
|| *Google Sparse Hash Map* || 50000 || 184 || 3536 || 4246229 ||
|| *Google Dense Hash Map* || 50000 || 39 || 203 || 2395648 ||
|| *ULIB Align Hash Map* || 50000 || *28* || 53 || 2098176 ||

|| *Hashing* || *Map Capacity* || *Insertion Time(us)* || *Search Time(us)* || *Memory Usage(Byte)* ||
|| *STL Hash Map* || 100000 || 129 || 5506 || *1650240* ||
|| *Google Sparse Hash Map* || 100000 || 164 || 20 || 4246053 ||
|| *Google Dense Hash Map* || 100000 || 46 || 340 || 4782080 ||
|| *ULIB Align Hash Map* || 100000 || *40* || *53* || 4195328 ||

== Conclusions ==
Generally, both insert() and find() show better performance for sequential keys. This is mainly derived from better locality. Besides, we see that compiler optimization has great influence on the results. Overall, among all tests, align_hash_map has the minimum CPU time.